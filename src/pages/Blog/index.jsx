import React from "react";
import Game from "../../components/Game";
import TyppingPoint from "../../utils/typingPoint";
import TypeText from "../../utils/typpingEffect";
import { useWindowWidth } from "../../hooks/useWindowWidth";

const postsData = [
	{
		id: 0,
		title: "Flexbox layouts",
		description:
			"Flexbox (или просто flex) — это способ позиционирования элементов в CSS. С помощью этой функции можно быстро и легко описывать, как будет располагаться тот или иной блок на веб-странице. Элементы выстраиваются по заданной оси и автоматически распределяются согласно настройкам.",
		date: "10.01.2022",
		imageSrc:
			"https://lh3.googleusercontent.com/HCyH5ZG-qxU4AW6is9J_w1VwIhAKFpbeSolpu0mV3zg6W6C4GkKUDoBZ1eokIYAOMqUXpTutr2JEMx3FWdx7PCIaihqOuojQMaN5_b87ezLUYW8mfc9kcvwq9d7bIHX3D7aRK8GzsmUJMpgGsqYFEvUFR6C8UhdpnN68k3jPu1QWDZfGs_2joUc6dGMezA",
	},
	{
		id: 1,
		title: "Grid layouts",
		description:
			"CSS Grid Layout (далее просто Grid) — это способ двумерной раскладки. Именно ДВУмерной, в отличии от Flexbox. Flexbox позволяет полноценно управлять элементами только по одной оси. Grid чем-то похож на дисплей: тэйбл (далее таблицы). Но есть важное отличие: таблицы созданы для отображения табличных данных, а HE для раскладки элементов на страницах. Их стали использовать для создания сеток страниц, потому что на тот момент в CSS не было других (адекватных) вариантов сделать это. Grid же изначально разрабатывался для создания современных, интересных, часто нестандартных двумерных раскладок. Grid даёт возможность контролировать одновременно и строки, и столбцы, в которых располагаются элементы. Эти элементы можно двигать внутри Grid-сетки практически как нам вздумается.",
		date: "13.02.2022",
		imageSrc: "https://miro.medium.com/max/640/1*1V62JvrdDRwMRXGLqUzMOw.gif",
	},
	{
		id: 2,
		title: "Особенности React js",
		description:
			"Используя библиотеку React.js, разработчик получает возможность сосредоточиться на пользовательском интерфейсе и компонентах приложения, уделяя меньше внимания коду. Эта библиотека помогает создавать приложения быстрее, декларативный стиль программирования значительно упрощает отладку компонентов и проекта в целом. Рассмотрим главные особенности React.js, которые делают эту библиотеку такой удобной.Библиотека React.js включает в себя компоненты, ответственные за общение в социальных сетях, пользовательский интерфейс, управление состоянием приложения и другие сложные задачи. Модульный подход в React.js упрощает проектирование и предоставляет разработчикам наборы различных готовых компонентов.Библиотека React.js доступна в компактной редакции Minimal React. Этот небольшой пакет не требует времени и усилий для настройки. Он поставляется с удобной опцией разделения кода, которая помогает сократить время загрузки веб-сайта, так как эта функция предотвращает одновременный рендеринг всех компонентов.",
		date: "15.03.2022",
		imageSrc: "https://miro.medium.com/max/1116/1*QhEiu4_xQJXQ6lfQU7VsNg.png",
	},
	{
		id: 3,
		title: "Алгоритм быстрой сортировки",
		description:
			"Быстрая сортировка — это “разделяй и властвуй” алгоритм в стиле “сортировка слиянием”. Основная идея заключается в том, чтобы найти опорный элемент в массиве для сравнения с остальными частями, затем сдвигать элементы так, чтобы все части перед опорным элементом были меньше его, а все элементы после опорного были больше его. После этого рекурсивно выполнить ту же операцию на элементы до и после опорного. Существует множество различных алгоритмов для достижения быстрой сортировки, в этой статье рассматривается только один из них.Существует две базовые операции в алгоритме: замена элемента на месте и разбиение массива на части. Основные шаги для разделения массива:Найти опорный элемент в массиве. Этот элемент — основа для сравнения за одни проход.Установить указатель (левый указатель) с первого элемента в массиве.Установить указатель (правый указатель) с последнего элемента в массиве.Пока значение левого указателя в массиве меньше, чем значение опорного элемента, сдвигать левый указатель вправо (добавить 1). Продолжить пока значение левого указателя не станет большим или равным опорному.Пока значение правого указателя в массиве больше, чем значение опорного элемента, сдвигать правый указатель влево (вычитать 1). Продолжать пока значение правого указателя не станет меньшим или равным значению разделителя.Если левый указатель меньше или равен правому указателю, поменять значения в этих местах в массиве.Сдвинуть левый указатель вправо на одну позицию и правый указатель на одну позицию влево.Если левый указатель и правый указатель не встретятся, перейти к шагу 1.",
		date: "18.03.2022",
		imageSrc: "https://miro.medium.com/max/640/1*1V62JvrdDRwMRXGLqUzMOw.gif",
	},
	{
		id: 4,
		title: "Рекурсия",
		description:
			"В программировании рекурсия, или же рекурсивная функция — это такая функция, которая вызывает саму себя.Рекурсию также можно сравнить с матрёшкой. Первая кукла самая большая, за ней идёт точно такая же кукла, но поменьше. Суть матрёшки состоит в том, что вы можете открывать её и доставать из неё точно такую же куклу, только немного меньше. Такой продолжительный процесс длится до тех пор, пока вы не дойдёте до последней куклы, которая и прервёт цикл. Так выглядит визуальная репрезентация рекурсии.",
		date: "09.04.2022",
		imageSrc:
			"https://thecode.media/wp-content/uploads/2020/08/photo_2020-08-05-12.04.57.jpeg",
	},
];

const Blog = ({ page, setPage }) => {
	const windowWidth = useWindowWidth();

	return (
		<div className="blog">
			<section className="intro">
				<div className="intro__wrapper wrapper">
					<div className="intro__content">
						<p className="intro__title">
							Hi, this is the blog of
							<TyppingPoint />
						</p>
						<h1 className="intro__container">
							<div className="intro__name glitch">Kurdyukov Alexey</div>
							<div className="intro__subtitle">
								<TypeText speed={800} words={`Let's Grow up Together`} />
							</div>
						</h1>
						<p className="intro__description">
							This blog is dedicated to web development in general and frontend
							in particular. Here I will post brief information about the
							technologies I am interested in, interesting articles on habr and
							stackoverflow.
						</p>
						{windowWidth && windowWidth > 1200 && (
							<p>
								Play with me in tic tac toe or scroll down to see new posts ;)
							</p>
						)}
					</div>
					{windowWidth && windowWidth > 1200 && <Game />}
				</div>
			</section>
			<section className="posts">
				<h2 className="posts__header">Posts</h2>
				{postsData.map((post) => {
					return (
						<div className="post" key={post.id}>
							<h3 className="post__title">{post.title}</h3>
							<img className="post__image" src={post.imageSrc} />
							<p className="post__description">{post.description}</p>
							<span className="post__date">{post.date}</span>
						</div>
					);
				})}
			</section>
		</div>
	);
};
export { Blog };
